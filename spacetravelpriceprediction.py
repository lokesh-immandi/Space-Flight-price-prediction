# -*- coding: utf-8 -*-
"""spacetravelpriceprediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L2DqxKA7cs1YobBEjX3eOFFonJ9uiJS0
"""

#Importing Libraries
import numpy as np
import pandas as pd

import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error as mse
from sklearn.metrics import r2_score
from math import sqrt
from sklearn.linear_model import Ridge
from sklearn.linear_model import Lasso
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import KFold
from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import RandomizedSearchCV

from prettytable import PrettyTable

!pip install -U -q PyDrive
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials# Authenticate and create the PyDrive client.

auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

#https://drive.google.com/file/d/10sHQ660l90GnGCzOYuS2T_LFEp4DEt6R/view?usp=sharing
fileDownloaded = drive.CreateFile({'id':'10sHQ660l90GnGCzOYuS2T_LFEp4DEt6R'})

fileDownloaded.GetContentFile('datatrain2.csv')

#Reading the training data of our dataset
train_df = pd.read_csv('datatrain2.csv', delimiter=',')
train_df.head(10)

#Now here we will be looking at the kind of columns our dataset has.
train_df.columns

train_df.info()

train_df.describe()

#Now while using the IsNull function we will gonna see the number of null values in our dataset
train_df.isnull().head()

#Now while using the IsNull function and sum function we will gonna see the number of null values in our dataset
train_df.isnull().sum()

train_df.dropna(inplace = True)

#checking for Duplicate values
train_df[train_df.duplicated()].head(2)

#train_df.drop_duplicates(keep='first',inplace=True)
train_df.head()

train_df.shape

#Checking the Additional_info column and having the count of unique types of values.
train_df["Additional_Info"].value_counts()

#Checking the different Airlines
train_df["Airline"].unique()

#Checking the different Airline Routes 
train_df["Route"].unique()

#testing data
test_df = pd.read_csv('datatrain2.csv', delimiter=',')
test_df.head(10)

#Now here we will be looking at the kind of columns our testing data has.
test_df.columns

#Information about the dataset
test_df.info()

print("Airline")
print("-"*75)
print(test_df["Airline"].value_counts())
Airline = pd.get_dummies(test_df["Airline"], drop_first= True)

print()

print("Source")
print("-"*75)
print(test_df["Source"].value_counts())
Source = pd.get_dummies(test_df["Source"], drop_first= True)

print()

print("Destination")
print("-"*75)
print(test_df["Destination"].value_counts())
Destination = pd.get_dummies(test_df["Destination"], drop_first = True)

# Concatenate dataframe --> test_data + Airline + Source + Destination
data_test = pd.concat([test_df, Airline, Source, Destination])

print()
print()

print("Shape of test data : ", data_test.shape)

#Plotting Price vs Airline plot
sns.catplot(y = "Price", x = "Airline", data = train_df.sort_values("Price", ascending = False), kind="boxen", height = 8, aspect = 3)
plt.show()

#Plotting Violin plot for Price vs Source
sns.catplot(y = "Price", x = "Source", data = train_df.sort_values("Price", ascending = False), kind="violin", height = 4, aspect = 3)
plt.show()

#Plotting Box plot for Price vs Destination
sns.catplot(y = "Price", x = "Destination", data = train_df.sort_values("Price", ascending = False), kind="box", height = 4, aspect = 3)
plt.show()

#Letâ€™s see our processed data first
train_df.head()

#Plotting Bar chart for Types of Airline vs Number of Flights
plt.figure(figsize = (20,5))
plt.title('Count of flights with different Airlines')
ax=sns.countplot(x = 'Airline', data =train_df)
plt.xlabel('Airline')
plt.ylabel('Count of flights')
plt.xticks(rotation = 45)
for p in ax.patches:
    ax.annotate(int(p.get_height()), (p.get_x()+0.25, p.get_height()+1), va='bottom', color= 'black')

#Plotting Ticket Prices VS Airlines
plt.figure(figsize = (15,4))
plt.title('Price VS Airlines')
plt.scatter(train_df['Airline'], train_df['Price'])
plt.xticks
plt.xlabel('Airline')
plt.ylabel('Price of ticket')
plt.xticks(rotation = 90)

#Plotting Correlation

plt.figure(figsize = (5,5))
sns.heatmap(train_df.corr(), annot = True, cmap = "RdYlGn")
plt.show()

#Dropping the Price column as it is of no use
data = train_df.drop(["Price"], axis=1)

#Dealing with Categorical Data and Numerical Data

train_categorical_data = data.select_dtypes(exclude=['int64', 'float','int32'])
train_numerical_data = data.select_dtypes(include=['int64', 'float','int32'])

test_categorical_data = test_df.select_dtypes(exclude=['int64', 'float','int32','int32'])
test_numerical_data  = test_df.select_dtypes(include=['int64', 'float','int32'])
train_categorical_data.head()